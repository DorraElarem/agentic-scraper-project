services:
  # Base de données PostgreSQL
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dorra123
      POSTGRES_DB: scraper_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d scraper_db"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - agentic-scraper-network

  # Redis pour Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - agentic-scraper-network
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru

  # Ollama pour LLM - TIMEOUTS MASSIFS
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=15m               # AUGMENTÉ
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_CONTEXT_LENGTH=4096
      - OLLAMA_MAX_QUEUE=64                 # RÉDUIT
      - OLLAMA_REQUEST_TIMEOUT=900          # NOUVEAU: 15 minutes
    restart: unless-stopped
    networks:
      - agentic-scraper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version", "||", "exit", "0"]
      interval: 60s                         # AUGMENTÉ
      timeout: 20s                          # AUGMENTÉ
      retries: 3
      start_period: 60s                     # AUGMENTÉ
    deploy:
      resources:
        limits:
          memory: 8G                        # AUGMENTÉ
          cpus: '3.0'                       # AUGMENTÉ
        reservations:
          memory: 6G                        # AUGMENTÉ

  # Application FastAPI - TIMEOUTS MASSIFS
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:dorra123@db:5432/scraper_db?client_encoding=utf8
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_HOST=http://ollama:11434
      # CORRECTION CRITIQUE: Timeouts cohérents et MASSIFS
      - OLLAMA_TIMEOUT=900                  # 15 minutes
      - OLLAMA_CONNECTION_TIMEOUT=45        # 45 secondes
      - OLLAMA_QUICK_TIMEOUT=180            # 3 minutes
      - REQUEST_TIMEOUT=180                 # 3 minutes
      - TASK_TIME_LIMIT=1200                # 20 minutes
      - TASK_SOFT_TIME_LIMIT=1080           # 18 minutes
      - BCT_TIMEOUT=300                     # 5 minutes pour BCT
      - INS_TIMEOUT=240                     # 4 minutes pour INS
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 45s                         # AUGMENTÉ
      timeout: 15s                          # AUGMENTÉ
      retries: 3
      start_period: 60s                     # AUGMENTÉ
    networks:
      - agentic-scraper-network

  # Worker Celery - TIMEOUTS MASSIFS ET COHÉRENTS
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:dorra123@db:5432/scraper_db?client_encoding=utf8
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_HOST=http://ollama:11434
      # CORRECTION CRITIQUE: Timeouts MASSIFS et cohérents
      - OLLAMA_TIMEOUT=900                  # 15 minutes
      - OLLAMA_CONNECTION_TIMEOUT=45        # 45 secondes
      - OLLAMA_QUICK_TIMEOUT=180            # 3 minutes
      - REQUEST_TIMEOUT=180                 # 3 minutes
      - TASK_TIME_LIMIT=1200                # 20 minutes
      - TASK_SOFT_TIME_LIMIT=1080           # 18 minutes
      - BCT_TIMEOUT=300                     # 5 minutes pour BCT
      - INS_TIMEOUT=240                     # 4 minutes pour INS
      - OLLAMA_NUM_CTX=4096
      - OLLAMA_MAX_TOKENS=600
      - OLLAMA_TEMPERATURE=0.1
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    restart: unless-stopped
    networks:
      - agentic-scraper-network
    command: >
      sh -c "
        echo 'Starting Celery Worker with MASSIVE timeouts...' &&
        sleep 45 &&
        cd /app && celery -A app.celery_app:celery_app worker --loglevel=info --concurrency=1 --pool=prefork --max-tasks-per-child=50 --time-limit=1200 --soft-time-limit=1080
      "
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[c]elery.*worker' || exit 1"]
      interval: 90s                         # AUGMENTÉ
      timeout: 25s                          # AUGMENTÉ
      retries: 3
      start_period: 180s                    # AUGMENTÉ (3 minutes)

  # Flower pour monitoring Celery
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - agentic-scraper-network
    command: >
      sh -c "
        echo 'Starting Flower...' &&
        sleep 30 &&
        cd /app && celery -A app.celery_app:celery_app flower --port=5555 --basic_auth=admin:admin123
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local

networks:
  agentic-scraper-network:
    driver: bridge