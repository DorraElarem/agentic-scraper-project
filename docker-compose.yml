services:
  # Base de données PostgreSQL
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dorra123
      POSTGRES_DB: scraper_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d scraper_db"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - agentic-scraper-network
    command: >
      postgres -c log_statement=all 
      -c logging_collector=on 
      -c log_destination=stderr 
      -c max_connections=100

  # Redis pour Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - agentic-scraper-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Ollama pour LLM - OPTIMISÉ avec fallback
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=5m
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_CONTEXT_LENGTH=3072
      - OLLAMA_MAX_QUEUE=128
    restart: unless-stopped
    networks:
      - agentic-scraper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version", "||", "exit", "0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '2.0'
        reservations:
          memory: 4G

  # Application FastAPI
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:dorra123@db:5432/scraper_db?client_encoding=utf8
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_TIMEOUT=60
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      # 🔥 FIX CRITIQUE: Valeur simple pour éviter l'erreur de parsing JSON
      - CELERY_ACCEPT_CONTENT=json
      - CELERY_TASK_SERIALIZER=json
      - CELERY_RESULT_SERIALIZER=json
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agentic-scraper-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    command: >
      sh -c "
        echo '🚀 Starting FastAPI application...' &&
        echo '⏳ Waiting for services...' &&
        sleep 15 &&
        echo '🔧 Running database migrations...' &&
        cd /app && python -c 'from app.models.database import init_db; init_db()' &&
        echo '✅ Database initialized' &&
        echo '🌐 Starting FastAPI server...' &&
        cd /app && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Worker Celery - VERSION CORRIGÉE avec PYTHONPATH
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:dorra123@db:5432/scraper_db?client_encoding=utf8
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_TIMEOUT=60
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      # 🔥 FIX CRITIQUE: Valeurs simples
      - CELERY_ACCEPT_CONTENT=json
      - CELERY_TASK_SERIALIZER=json
      - CELERY_RESULT_SERIALIZER=json
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    restart: unless-stopped
    networks:
      - agentic-scraper-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    command: >
      sh -c "
        echo '🔧 Starting Celery Worker...' &&
        echo '⏳ Waiting for services...' &&
        sleep 25 &&
        echo '🧪 Running diagnostics...' &&
        cd /app && python app/worker.py --diagnose-only &&
        echo '✅ Diagnostics passed' &&
        echo '🚀 Starting Celery worker...' &&
        cd /app && celery -A app.celery_app:celery_app worker --loglevel=info --concurrency=2 --pool=prefork --max-tasks-per-child=1000
      "
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[c]elery.*worker' || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s

  # Flower pour monitoring Celery
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - agentic-scraper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      sh -c "
        echo '🌸 Starting Flower...' &&
        sleep 20 &&
        cd /app && celery -A app.celery_app:celery_app flower --port=5555 --basic_auth=admin:admin123
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local

networks:
  agentic-scraper-network:
    driver: bridge